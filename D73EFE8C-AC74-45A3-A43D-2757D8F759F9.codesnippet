<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string>init.UITableView</string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>All</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>&lt;
BaseViewProtocol
,UITableViewDelegate
,UITableViewDataSource
&gt;

/// UI
@property(nonatomic,strong)UITableView *tableView;
/// Data
@property(nonatomic,strong)NSMutableArray &lt;UITableViewCell *&gt;*tbvCellMutArr;
@property(nonatomic,strong)NSMutableArray &lt;UIViewModel *&gt;*dataMutArr;

#pragma mark —— 一些私有方法
/// 下拉刷新 （子类要进行覆写）
-(void)pullToRefresh{
    [self feedbackGenerator];//震动反馈
//    @jobs_weakify(self)
//    [self withdrawBanklist:^(NSArray *data) {
//        @jobs_strongify(self)
//        if (data.count) {
//            [self endRefreshing:self.tableView];
//        }else{
//            [self endRefreshingWithNoMoreData:self.tableView];
//        }
//        /// 在reloadData后做的操作，因为reloadData刷新UI是在主线程上，那么就在主线程上等待
//        @jobs_weakify(self)
//        [self getMainQueue:^{
//            @jobs_strongify(self)
//        }];
//    }];
}
/// 上拉加载更多 （子类要进行覆写）
-(void)loadMoreRefresh{
    [self pullToRefresh];
}
#pragma mark —— UITableViewDelegate,UITableViewDataSource
- (void)tableView:(UITableView *)tableView
commitEditingStyle:(UITableViewCellEditingStyle)editingStyle
forRowAtIndexPath:(NSIndexPath *)indexPath{
    
}

- (void)tableView:(UITableView *)tableView
didSelectRowAtIndexPath:(NSIndexPath *)indexPath{
    
}
/// 编辑模式下，点击取消左边已选中的cell的按钮
- (void)tableView:(UITableView *)tableView
didDeselectRowAtIndexPath:(NSIndexPath *)indexPath{
    
}

- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView {
    return self.tableViewCellMutArr.count;
}

- (CGFloat)tableView:(UITableView *)tableView
heightForRowAtIndexPath:(NSIndexPath *)indexPath{
    switch (indexPath.section) {
        case 0:
            return [BaiShaETProjMembersTBVCell2 cellHeightWithModel:nil];
            break;
        case 1:
        case 2:
            return [BaiShaETProjMembersTBVCell1 cellHeightWithModel:nil];
            break;
        default:
            return [BaseTableViewCell cellHeightWithModel:nil];
            break;
    }
}

- (NSInteger)tableView:(UITableView *)tableView
 numberOfRowsInSection:(NSInteger)section{
    return self.tableViewCellMutArr[section].count;
}

- (UITableViewCell *)tableView:(UITableView *)tableView
         cellForRowAtIndexPath:(NSIndexPath *)indexPath{
             
             BaseTableViewCell *cell = [BaseTableViewCell cellStyleDefaultWithTableView:tableView];
             cell.accessoryType = UITableViewCellAccessoryNone;
             cell.indexPath = indexPath;
             [cell richElementsInCellWithModel:nil];
             
//             {
//                 BaseTableViewCell *cell = (BaseTableViewCell *)self.tableViewCellMutArr[indexPath.section][indexPath.row];
//                 cell.accessoryType = UITableViewCellAccessoryDisclosureIndicator;
//                 cell.indexPath = indexPath;
//                 switch (indexPath.section) {
//                     case 0:
//                         [cell richElementsInCellWithModel:nil];
//                         break;
//                     case 1:
//                     case 2:
//                         [cell richElementsInCellWithModel:self.dataMutArr[indexPath.section - 1][indexPath.row]];
//                         break;
//                     default:
//                         [cell richElementsInCellWithModel:nil];
//                         break;
//                 }
//             }
             return cell;
}

- (CGFloat)tableView:(UITableView *)tableView
heightForHeaderInSection:(NSInteger)section{
    return section ? [BaseTableViewHeaderFooterView heightForHeaderInSection:nil] : JobsWidth(10);
}

- (CGFloat)tableView:(UITableView *)tableView
heightForFooterInSection:(NSInteger)section{
    return section ? [BaseTableViewHeaderFooterView heightForFooterInSection:nil] : JobsWidth(10);
}
/// 这里涉及到复用机制，return出去的是UITableViewHeaderFooterView的派生类
- (UIView *)tableView:(UITableView *)tableView
viewForHeaderInSection:(NSInteger)section{
    if (self.viewModel.usesTableViewHeaderView) {
        BaseTableViewHeaderFooterView *headerView = BaseTableViewHeaderFooterView.jobsInitWithReuseIdentifier;
        headerView.section = section;// 不写这一句有悬浮
        [headerView richElementsInViewWithModel:nil];
        @jobs_weakify(self)
        [headerView actionObjectBlock:^(id data) {
            @jobs_strongify(self)
        }];return headerView;
    }return nil;
}
/// 这里涉及到复用机制，return出去的是UITableViewHeaderFooterView的派生类
- (nullable UIView *)tableView:(UITableView *)tableView
        viewForFooterInSection:(NSInteger)section{
    if(self.viewModel.usesTableViewFooterView){
        BaseTableViewHeaderFooterView *tbvFooterView = BaseTableViewHeaderFooterView.jobsInitWithReuseIdentifier;
        tbvFooterView.section = section;// 不写这一句有悬浮
        tbvFooterView.backgroundColor = HEXCOLOR(0xEAEBED);
        tbvFooterView.contentView.backgroundColor = HEXCOLOR(0xEAEBED);
        
        [tbvFooterView richElementsInViewWithModel:nil];
        @jobs_weakify(self)
        [tbvFooterView actionObjectBlock:^(id data) {
            @jobs_strongify(self)
        }];return tbvFooterView;
    }return nil;
}
/**
 ❤️如果单独的对每一个row对应的UITableViewCell的边距有缩进则使用下列方法❤️
 如果这个TableViewCell是BaseTableViewCell则不需要复写-(void)setFrame:(CGRect)frame；否则是需要：
 
 直接影响:
 cell.offsetXForEach = JobsWidth(8);
 cell.offsetYForEach = JobsWidth(6);
 
 // 在具体的子类去实现,分类调用异常
 -(void)setFrame:(CGRect)frame{
     NSLog(@"self.offsetXForEach = %f",self.offsetXForEach);
     NSLog(@"self.offsetYForEach = %f",self.offsetYForEach);
     frame.origin.x += self.offsetXForEach;
     frame.origin.y += self.offsetYForEach;
     frame.size.height -= self.offsetYForEach * 2;
     frame.size.width -= self.offsetXForEach * 2;
     [super setFrame:frame];
 }

 ❤️ 如果对每一section的cell进行缩进，则在外层协议：❤️
 - (void)tableView:(UITableView *)tableView
   willDisplayCell:(UITableViewCell *)cell
 forRowAtIndexPath:(NSIndexPath *)indexPath{

     [UITableViewCell tableView:tableView
    makeSectionFirstAndLastCell:cell
                    atIndexPath:indexPath
                      cellBgCor:UIColor.whiteColor
                  bottomLineCor:UIColor.whiteColor
                 cellOutLineCor:HEXCOLOR(0xEEE2C8)
                    roundCorner:JobsWidth(8)
                    borderWidth:JobsWidth(1)
                             dx:JobsWidth(0)
                             dy:0];
 }
 */
- (void)tableView:(UITableView *)tableView
  willDisplayCell:(UITableViewCell *)cell
forRowAtIndexPath:(NSIndexPath *)indexPath{
    
    [tableView hideSeparatorLineAtLast:indexPath
                                  cell:cell];
    cell.img = JobsIMG(@"向右的箭头（大）");
    @jobs_weakify(self)
    [cell customAccessoryView:^(id data) {
        @jobs_strongify(self)
        BaiShaETProjMembersTBVCell1 *cell = (BaiShaETProjMembersTBVCell1 *)data;
        NSLog(@"MMM - %ld",cell.index);
    }];
    
    [UITableViewCell tableView:tableView
   makeSectionFirstAndLastCell:cell
                   atIndexPath:indexPath
                     cellBgCor:HEXCOLOR(0xFFFFFF)
                 bottomLineCor:HEXCOLOR(0xFFFFFF)
                cellOutLineCor:HEXCOLOR(0xEEE2C8)
                   roundCorner:JobsWidth(8)
                   borderWidth:JobsWidth(10)
                            dx:JobsWidth(0)
                            dy:0];
}
#pragma mark —— lazyLoad
-(UITableView *)tableView{
    if (!_tableView) {
        _tableView = UITableView.initWithStyleGrouped;
        _tableView.backgroundColor = AppMainCor_02;
        _tableView.separatorStyle = UITableViewCellSeparatorStyleSingleLine;
        _tableView.separatorColor = HEXCOLOR(0xEEE2C8);
        _tableView.showsVerticalScrollIndicator = NO;
        _tableView.scrollEnabled = YES;
        [self dataLinkByTableView:_tableView];
//        _tableView.delegate = self;
//        _tableView.dataSource = self;
        _tableView.tableHeaderView = UIView.new;/// 这里接入的就是一个UIView的派生类
        _tableView.tableFooterView = UIView.new;/// 这里接入的就是一个UIView的派生类
        _tableView.contentInset = UIEdgeInsetsMake(0, 0, JobsBottomSafeAreaHeight(), 0);
        [_tableView registerHeaderFooterViewClass:MSCommentTableHeaderFooterView.class];
        [_tableView registerTableViewClass];
        if(@available(iOS 11.0, *)) {
            _tableView.contentInsetAdjustmentBehavior = UIScrollViewContentInsetAdjustmentNever;
        }else{
            SuppressWdeprecatedDeclarationsWarning(self.automaticallyAdjustsScrollViewInsets = NO);
        }
        
        {
            MJRefreshConfigModel *refreshConfigHeader = MJRefreshConfigModel.new;
            refreshConfigHeader.stateIdleTitle = Internationalization(@"下拉可以刷新");
            refreshConfigHeader.pullingTitle = Internationalization(@"下拉可以刷新");
            refreshConfigHeader.refreshingTitle = Internationalization(@"松开立即刷新");
            refreshConfigHeader.willRefreshTitle = Internationalization(@"刷新数据中");
            refreshConfigHeader.noMoreDataTitle = Internationalization(@"下拉可以刷新");

            MJRefreshConfigModel *refreshConfigFooter = MJRefreshConfigModel.new;
            refreshConfigFooter.stateIdleTitle = Internationalization(@"");
            refreshConfigFooter.pullingTitle = Internationalization(@"");;
            refreshConfigFooter.refreshingTitle = Internationalization(@"");;
            refreshConfigFooter.willRefreshTitle = Internationalization(@"");;
            refreshConfigFooter.noMoreDataTitle = Internationalization(@"");;

            self.refreshConfigHeader = refreshConfigHeader;
            self.refreshConfigFooter = refreshConfigFooter;

            _tableView.mj_header = self.mjRefreshNormalHeader;
            _tableView.mj_header.automaticallyChangeAlpha = YES;//根据拖拽比例自动切换透明度
        }
        
        {
            _tableView.ly_emptyView = [LYEmptyView emptyViewWithImageStr:@"暂无数据"
                                                                     titleStr:Internationalization(@"暂无数据")
                                                                    detailStr:Internationalization(@"")];
            
            _tableView.ly_emptyView.titleLabTextColor = JobsLightGrayColor;
            _tableView.ly_emptyView.contentViewOffset = JobsWidth(-180);
            _tableView.ly_emptyView.titleLabFont = UIFontWeightLightSize(16);
        }
        
        {/// 设置tabAnimated相关属性
            // 可以不进行手动初始化，将使用默认属性
            _tableView.tabAnimated = [TABTableAnimated animatedWithCellClass:DDSignlePeopleCell.class
                                                                  cellHeight:74.5];
            _tableView.tabAnimated.superAnimationType = TABViewSuperAnimationTypeShimmer;
            [_tableView tab_startAnimation];   // 开启动画
        }
        
        [self.view addSubview:_tableView];
        [self fullScreenConstraintTargetView:_tableView topViewOffset:0];
        
        /// 判断是否是子类，如果是子类则不调用。
        /// 因为这里懒加载了约束，子类调用这个属性再进行二次约束会出现一些刷新异常
        /// 比如在子类 mas_updateConstraints和mas_remakeConstraints 刷新约束均异常
        if (self.class == 本类的类名.class) {
            [self dataLinkByTableView:_tableView];
            [self layoutIfNeeded];// 数据链接了以后有Frame直接走协议；如果先有frame再链接数据，则不走协议
            [_tableView mas_makeConstraints:^(MASConstraintMaker *make) {
                make.top.equalTo(self.titleLab.mas_bottom).offset(JobsWidth(10));
                make.left.equalTo(self.contentView).offset(JobsWidth(24));
                make.right.equalTo(self.contentView).offset(JobsWidth(-24));
                make.height.mas_equalTo(子TableViewCell的高度 * self.dataMutArr.vm1.count + JobsWidth(5));
            }];
        }
    }return _tableView;
}

-(NSMutableArray&lt;UITableViewCell *&gt; *)tbvCellMutArr{
    if (!_tbvCellMutArr) {
        _tbvCellMutArr = NSMutableArray.array;
        [_tbvCellMutArr addObject:[CasinoAgencyTBVCell1 cellWithTableView:self.tableView]];
        [_tbvCellMutArr addObject:[CasinoAgencyTBVCell2 cellWithTableView:self.tableView]];
        [_tbvCellMutArr addObject:[CasinoAgencyTBVCell3 cellWithTableView:self.tableView]];
        [_tbvCellMutArr addObject:[CasinoAgencyTBVCell4 cellWithTableView:self.tableView]];
    }return _tbvCellMutArr;
}

-(NSMutableArray&lt;UIViewModel *&gt; *)dataMutArr{
    if (!_dataMutArr) {
        _dataMutArr = NSMutableArray.array;
    }return _dataMutArr;
}</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>D73EFE8C-AC74-45A3-A43D-2757D8F759F9</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Objective-C</string>
	<key>IDECodeSnippetPlatformFamily</key>
	<string>iphoneos</string>
	<key>IDECodeSnippetSummary</key>
	<string>创建UITableView的相关子类</string>
	<key>IDECodeSnippetTitle</key>
	<string>init.UITableView</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
