<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string>init.UICollectionView</string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>All</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>
&lt;
UICollectionViewDataSource
,UICollectionViewDelegate
,UICollectionViewDelegateFlowLayout
&gt;

// UI
@property(nonatomic,strong)UICollectionViewFlowLayout *layout;
@property(nonatomic,strong)UICollectionView *collectionView;
// Data
@property(nonatomic,strong)NSMutableArray &lt;UIViewModel *&gt;*dataMutArr;

#pragma mark —— 一些私有方法
/// 下拉刷新 （子类要进行覆写）
-(void)pullToRefresh{
    [NSObject feedbackGenerator];//震动反馈
    @jobs_weakify(self)
    [self withdrawBanklist:^(NSArray *data) {
        @jobs_strongify(self)
        if (data.count) {
            [self endRefreshing:self.collectionView];
        }else{
            [self endRefreshingWithNoMoreData:self.collectionView];
        }
        /// 在reloadData后做的操作，因为reloadData刷新UI是在主线程上，那么就在主线程上等待
        @jobs_weakify(self)
        [self getMainQueue:^{
            @jobs_strongify(self)
            [CollectionViewAnimationKit showWithAnimationType:XSCollectionViewAnimationTypeFall
                                               collectionView:self.collectionView];
        }];
    }];
}
/// 上拉加载更多 （子类要进行覆写）
-(void)loadMoreRefresh{
    [self pullToRefresh];
}
#pragma mark —— UICollectionViewCell 部署策略
/// block4 为保留位，处理异常
-(UICollectionViewCell *)planAtIndexPath:(nonnull NSIndexPath *)indexPath
                                  block1:(JobsReturnIDByVoidBlock)block1
                                  block2:(JobsReturnIDByVoidBlock)block2
                                  block3:(JobsReturnIDByVoidBlock)block3
                                  block4:(JobsReturnIDByVoidBlock)block4{
    if (indexPath.item == 0) {
        if (block1) return block1();
    }else if (indexPath.item == 1){
        if (block2) return block2();
    }else if(indexPath.item == 2){
        if (block3) return block3();
    }else{
        if (block4) return block4();
    }return nil;
}
/// block4 为保留位，处理异常
-(CGSize)planSizeAtIndexPath:(nonnull NSIndexPath *)indexPath
                      block1:(JobsReturnCGSizeByVoidBlock)block1
                      block2:(JobsReturnCGSizeByVoidBlock)block2
                      block3:(JobsReturnCGSizeByVoidBlock)block3
                      block4:(JobsReturnCGSizeByVoidBlock)block4{
    if (indexPath.item == 0) {
        if (block1) return block1();
    }else if (indexPath.item == 1){
        if (block2) return block2();
    }else if(indexPath.item == 2){
        if (block3) return block3();
    }else{
        if (block4) return block4();
    }return CGSizeZero;
}
#pragma mark —— UICollectionViewDataSource
- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView *)collectionView {
    return 1;
}

- (nonnull __kindof UICollectionViewCell *)collectionView:(nonnull UICollectionView *)collectionView
                                   cellForItemAtIndexPath:(nonnull NSIndexPath *)indexPath {
    @jobs_weakify(self)
    return [self planAtIndexPath:indexPath
                   block1:^{
        @jobs_strongify(self)
        self-&gt;rechargeCVCellStyle2_1 = [rechargeCVCellStyle2_1 cellWithCollectionView:self.collectionView forIndexPath:indexPath];
        UIViewModel *viewModel = UIViewModel.new;
        viewModel.text = Internationalization(@"Recharge Amount");
        [self-&gt;rechargeCVCellStyle2_1 richElementsInCellWithModel:viewModel];
        return self-&gt;rechargeCVCellStyle2_1;
    }block2:^{
        @jobs_strongify(self)
        CasinoRechargeCVCellStyle1 *cell = [CasinoRechargeCVCellStyle1 cellWithCollectionView:self.collectionView forIndexPath:indexPath];
        [cell richElementsInCellWithModel:self.rechargeAmountMutArr];
        @jobs_weakify(self)
        [cell actionViewBlock:^(UIButton *data) {
            @jobs_strongify(self)
            NSString *string = data.titleForNormalState;
            NSLog(@"%@",string);
            self-&gt;rechargeCVCellStyle2_1.getTextField.text = string;
        }];
        return cell;
    }block3:^{
        @jobs_strongify(self)
        self-&gt;rechargeCVCellStyle2_2 = [rechargeCVCellStyle2_2 cellWithCollectionView:self.collectionView forIndexPath:indexPath];
        UIViewModel *viewModel = UIViewModel.new;
        viewModel.text = Internationalization(@"Remitter Name");
        [self-&gt;rechargeCVCellStyle2_2 richElementsInCellWithModel:viewModel];
        return self-&gt;rechargeCVCellStyle2_2;
    }block4:^{
        @jobs_strongify(self)
        CasinoRechargeCVCellStyle3 *cell = [CasinoRechargeCVCellStyle3 cellWithCollectionView:self.collectionView forIndexPath:indexPath];
        cell.idx = indexPath.item - 2;
        
        if (self.dataMutArr.count) {
            [cell richElementsInCellWithModel:self.dataMutArr[indexPath.item - 2]];
            self.selectedModel = self.dataMutArr[0];
        }
        @jobs_weakify(self)
        [cell actionViewBlock:^(NSString *data) {
            @jobs_strongify(self)
            [data pasteboard];
        }];
        
        return cell;
    }];
}

- (NSInteger)collectionView:(nonnull UICollectionView *)collectionView
     numberOfItemsInSection:(NSInteger)section {
    return self.dataMutArr.count;
}

- (UICollectionReusableView *)collectionView:(UICollectionView *)collectionView
           viewForSupplementaryElementOfKind:(NSString *)kind
                                 atIndexPath:(NSIndexPath *)indexPath {
    if (kind == UICollectionElementKindSectionHeader) {
        JobsHotLabelWithMultiLineHeaderFooterView * headerView = [collectionView UICollectionElementKindSectionHeaderClass:JobsHotLabelWithMultiLineHeaderFooterView.class
                                                                                                              forIndexPath:indexPath];
        
        UIViewModel *viewModel = UIViewModel.new;
        viewModel.textModel.text = Internationalization(@"独家情报");
        
        [headerView richElementsInViewWithModel:viewModel];
        
        return headerView;
    }else if (kind == UICollectionElementKindSectionFooter) {
        JobsHotLabelWithMultiLineHeaderFooterView *footerView = [collectionView UICollectionElementKindSectionFooterClass:JobsHotLabelWithMultiLineHeaderFooterView.class
                                                                                                             forIndexPath:indexPath];

        UIViewModel *viewModel = UIViewModel.new;
        viewModel.textModel.text = Internationalization(@"点击详情");

        [footerView richElementsInViewWithModel:viewModel];

        return footerView;
    }else return [collectionView UICollectionElementKindSectionHeaderClass:BaseCollectionReusableView.class
                                                              forIndexPath:indexPath];
}
#pragma mark —— UICollectionViewDelegate
/// 允许选中时，高亮
-(BOOL)collectionView:(UICollectionView *)collectionView
shouldHighlightItemAtIndexPath:(NSIndexPath *)indexPath {
    NSLog(@"%s", __FUNCTION__);
    return YES;
}
/// 高亮完成后回调
-(void)collectionView:(UICollectionView *)collectionView
didHighlightItemAtIndexPath:(NSIndexPath *)indexPath {
    NSLog(@"%s", __FUNCTION__);
}
/// 由高亮转成非高亮完成时的回调
-(void)collectionView:(UICollectionView *)collectionView
didUnhighlightItemAtIndexPath:(NSIndexPath *)indexPath {
    NSLog(@"%s", __FUNCTION__);
}
/// 设置是否允许选中
-(BOOL)collectionView:(UICollectionView *)collectionView
shouldSelectItemAtIndexPath:(NSIndexPath *)indexPath {
    NSLog(@"%s", __FUNCTION__);
    return YES;
}
/// 设置是否允许取消选中
-(BOOL)collectionView:(UICollectionView *)collectionView
shouldDeselectItemAtIndexPath:(NSIndexPath *)indexPath {
    NSLog(@"%s", __FUNCTION__);
    return YES;
}
/// 选中操作
- (void)collectionView:(UICollectionView *)collectionView
didSelectItemAtIndexPath:(NSIndexPath *)indexPath {
    NSLog(@"%s", __FUNCTION__);
    /**
     滚动到指定位置
     _collectionView.contentOffset = CGPointMake(0,-100);
     [_collectionView setContentOffset:CGPointMake(0, -200) animated:YES];// 只有在viewDidAppear周期 或者 手动触发才有效
     */
}
/// 取消选中操作
-(void)collectionView:(UICollectionView *)collectionView
didDeselectItemAtIndexPath:(NSIndexPath *)indexPath {
    NSLog(@"%s", __FUNCTION__);
}
#pragma mark —— UICollectionViewDelegateFlowLayout
/// header 大小
- (CGSize)collectionView:(UICollectionView *)collectionView
                  layout:(UICollectionViewLayout *)collectionViewLayout
referenceSizeForHeaderInSection:(NSInteger)section {
    return [UBLSearchCollectionReusableView collectionReusableViewSizeWithModel:nil];
}
/// Footer 大小
- (CGSize)collectionView:(UICollectionView *)collectionView
                  layout:(UICollectionViewLayout*)collectionViewLayout
referenceSizeForFooterInSection:(NSInteger)section{
    return [CasinoAgencyRecommendTipsCRView collectionReusableViewSizeWithModel:nil];
}

- (CGSize)collectionView:(UICollectionView *)collectionView
                  layout:(UICollectionViewLayout *)collectionViewLayout
  sizeForItemAtIndexPath:(NSIndexPath *)indexPath {
    return [self planSizeAtIndexPath:indexPath
                              block1:^CGSize{
        return [CasinoRechargeCVCellStyle2 cellSizeWithModel:nil];
    }block2:^CGSize{
        return [CasinoRechargeCVCellStyle1 cellSizeWithModel:self.rechargeAmountMutArr];
    }block3:^CGSize{
        return [CasinoRechargeCVCellStyle2 cellSizeWithModel:nil];
    }block4:^CGSize{
        return [CasinoRechargeCVCellStyle3 cellSizeWithModel:nil];
    }];
}
/// 定义的是元素垂直之间的间距
- (CGFloat)collectionView:(UICollectionView *)collectionView
                   layout:(UICollectionViewLayout *)collectionViewLayout
minimumLineSpacingForSectionAtIndex:(NSInteger)section {
    return 12;
}
/// 定义的是元素水平之间的间距。Api自动计算一行的Cell个数，只有当间距小于此定义的最小值时才会换行，最小执行单元是Section（每个section里面的样式是统一的）
- (CGFloat)collectionView:(UICollectionView *)collectionView
                   layout:(UICollectionViewLayout *)collectionViewLayout
minimumInteritemSpacingForSectionAtIndex:(NSInteger)section{
    return 0;
}
/// 内间距
-(UIEdgeInsets)collectionView:(UICollectionView *)collectionView
                       layout:(UICollectionViewLayout *)collectionViewLayout
       insetForSectionAtIndex:(NSInteger)section {
    return UIEdgeInsetsMake(0, 0, 0, 0);
}
#pragma mark —— lazyLoad
-(UICollectionViewFlowLayout *)layout{
    if (!_layout) {
        _layout = UICollectionViewFlowLayout.new;
        _layout.scrollDirection = UICollectionViewScrollDirectionVertical;
    }return _layout;
}

-(UICollectionView *)collectionView{
    if (!_collectionView) {
        _collectionView = [UICollectionView.alloc initWithFrame:CGRectZero
                                           collectionViewLayout:self.layout];
        _collectionView.backgroundColor = RGB_SAMECOLOR(246);
        _collectionView.dataSource = self;
        _collectionView.delegate = self;
        _collectionView.showsVerticalScrollIndicator = NO;

        [_collectionView registerCollectionViewClass];
        
        {
            MJRefreshConfigModel *refreshConfigHeader = MJRefreshConfigModel.new;
            refreshConfigHeader.stateIdleTitle = Internationalization(@"下拉可以刷新");
            refreshConfigHeader.pullingTitle = Internationalization(@"下拉可以刷新");
            refreshConfigHeader.refreshingTitle = Internationalization(@"松开立即刷新");
            refreshConfigHeader.willRefreshTitle = Internationalization(@"刷新数据中");
            refreshConfigHeader.noMoreDataTitle = Internationalization(@"下拉可以刷新");

            MJRefreshConfigModel *refreshConfigFooter = MJRefreshConfigModel.new;
            refreshConfigFooter.stateIdleTitle = @"";
            refreshConfigFooter.pullingTitle = @"";
            refreshConfigFooter.refreshingTitle = @"";
            refreshConfigFooter.willRefreshTitle = @"";
            refreshConfigFooter.noMoreDataTitle = @"";

            self.refreshConfigHeader = refreshConfigHeader;
            self.refreshConfigFooter = refreshConfigFooter;

            _collectionView.mj_header = self.mjRefreshNormalHeader;
            _collectionView.mj_header.automaticallyChangeAlpha = YES;//根据拖拽比例自动切换透明度
        }
        
        {
            _collectionView.ly_emptyView = [LYEmptyView emptyViewWithImageStr:@"暂无数据"
                                                                titleStr:@"暂无数据"
                                                               detailStr:@""];
            
            _collectionView.ly_emptyView.titleLabTextColor = JobsLightGrayColor;
            _collectionView.ly_emptyView.contentViewOffset = JobsWidth(-180);
            _collectionView.ly_emptyView.titleLabFont = [UIFont systemFontOfSize:JobsWidth(16) weight:UIFontWeightMedium];
        }
        
        {
            
            NSArray *classArray = @[
                                    DDCollectionViewCell_Style2.class,
                                    DDCollectionViewCell_Style3.class,
                                    DDCollectionViewCell_Style4.class,
                                    ];
            NSArray *sizeArray = @[
                                   [NSValue valueWithCGSize:[DDCollectionViewCell_Style2 cellSizeWithModel:nil]],
                                   [NSValue valueWithCGSize:[DDCollectionViewCell_Style3 cellSizeWithModel:nil]],
                                   [NSValue valueWithCGSize:[DDCollectionViewCell_Style4 cellSizeWithModel:nil]]
                                   ];
            
            _collectionView.tabAnimated = [TABCollectionAnimated animatedWithCellClassArray:classArray
                                                                              cellSizeArray:sizeArray
                                                                         animatedCountArray:@[@(1),@(1),@(1)]];
            
            [_collectionView.tabAnimated addHeaderViewClass:BaseCollectionReusableView_Style1.class
                                                   viewSize:[BaseCollectionReusableView_Style1 collectionReusableViewSizeWithModel:nil]
                                                  toSection:0];
            [_collectionView.tabAnimated addHeaderViewClass:BaseCollectionReusableView_Style1.class
                                                   viewSize:[BaseCollectionReusableView_Style2 collectionReusableViewSizeWithModel:nil]
                                                  toSection:2];
            
            _collectionView.tabAnimated.containNestAnimation = YES;
            _collectionView.tabAnimated.superAnimationType = TABViewSuperAnimationTypeShimmer;
            _collectionView.tabAnimated.canLoadAgain = YES;
            [_collectionView tab_startAnimation];   // 开启动画
        }

        [self.view addSubview:_collectionView];
        [self fullScreenConstraintTargetView:_collectionView topViewOffset:self.getTopLineLabSize.height];
    }return _collectionView;
}

-(NSMutableArray&lt;UIViewModel *&gt; *)dataMutArr{
    if (!_dataMutArr) {
        _dataMutArr = NSMutableArray.array;
    }return _dataMutArr;
}</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>325AC07C-FBCB-4C7D-BDE9-76691317ADEE</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Objective-C</string>
	<key>IDECodeSnippetPlatformFamily</key>
	<string>iphoneos</string>
	<key>IDECodeSnippetSummary</key>
	<string>创建UICollectionView的子类</string>
	<key>IDECodeSnippetTitle</key>
	<string>init.UICollectionView</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
